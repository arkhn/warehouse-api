name: front-api

on: [push]

jobs:
  build:
    name: Build front api
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: front/node_modules
          key: ${{ runner.OS }}-${{ matrix.node-version}}-node-modules-${{ hashFiles('front/yarn.lock') }}

      - name: Install Dependencies
        run: |
          cd front
          yarn install

      - name: Build
        run: |
          cd front
          CI=false yarn build

  publish:
    name: Build and publish
    env:
      IMAGE: arkhn/front-api
    runs-on: ubuntu-18.04
    needs: build
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        environment:
          [
            { "name": "ambroise", "secret": "IP_VM_AMB" },
            { "name": "aphp", "secret": "IP_VM_AP" },
            { "name": "clb", "secret": "IP_VM_CLB" },
            { "name": "curie", "secret": "IP_VM_CURIE" },
            { "name": "demo", "secret": "" },
            { "name": "dev", "secret": "" },
            { "name": "rms", "secret": "IP_VM_REIMS" },
            { "name": "staging", "secret": "" },
          ]
    steps:
      - uses: actions/checkout@v1

      - name: Build image
        env:
          IP: ${{ secrets[matrix.environment.secret] }}
          STAGE: ambroise
        run: |
          cd front/
          if [ -n "${{ matrix.environment.secret }}" ]; then
            ./scripts/generate_client_env.sh > .env.${{ matrix.environment.name }}
          fi
          docker build -t $IMAGE:${{ matrix.environment.name }} --build-arg ENV_FILE=.env.${{ matrix.environment.name }} .

      - name: Tag docker image with hash
        run: |
          docker tag $IMAGE:${{ matrix.environment.name }} $IMAGE:${{ matrix.environment.name }}-$GITHUB_SHA

      - name: Publish to the docker hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" |  docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
          docker push $IMAGE
